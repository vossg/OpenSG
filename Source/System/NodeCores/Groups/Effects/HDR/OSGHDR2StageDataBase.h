/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDR2StageData
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGHDR2STAGEDATABASE_H_
#define _OSGHDR2STAGEDATABASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGEffectGroupsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStageData.h" // Parent

#include "OSGSimpleSHLChunkFields.h"    // LuminanceMapShader type
#include "OSGTextureEnvChunkFields.h"   // SharedTextureEnvChunk type
#include "OSGMaterialChunkFields.h"     // SharedMaterialChunk type
#include "OSGChunkMaterialFields.h"     // SceneMaterial type
#include "OSGSysFields.h"               // CurrentAdaptLuminanceIdx type
#include "OSGFrameBufferObjectFields.h" // SceneRenderTarget type
#include "OSGUniformBufferObjStd140ChunkFields.h" // HdrShaderData type

#include "OSGHDR2StageDataFields.h"

OSG_BEGIN_NAMESPACE


class HDR2StageData;

//! \brief HDR2StageData Base Class.

class OSG_EFFECTGROUPS_DLLMAPPING HDR2StageDataBase : public StageData
{
  public:

    typedef StageData Inherited;
    typedef StageData ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(HDR2StageData);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        LuminanceMapShaderFieldId = Inherited::NextFieldId,
        AdaptLuminanceShaderFieldId = LuminanceMapShaderFieldId + 1,
        ThresholdShaderFieldId = AdaptLuminanceShaderFieldId + 1,
        ScaleShaderFieldId = ThresholdShaderFieldId + 1,
        BlurHorizShaderFieldId = ScaleShaderFieldId + 1,
        BlurVertShaderFieldId = BlurHorizShaderFieldId + 1,
        CompositeShaderFieldId = BlurVertShaderFieldId + 1,
        FinalScreenShaderFieldId = CompositeShaderFieldId + 1,
        SharedTextureEnvChunkFieldId = FinalScreenShaderFieldId + 1,
        SharedMaterialChunkFieldId = SharedTextureEnvChunkFieldId + 1,
        SceneMaterialFieldId = SharedMaterialChunkFieldId + 1,
        LuminanceMapMaterialFieldId = SceneMaterialFieldId + 1,
        AdaptLuminanceMaterialFieldId = LuminanceMapMaterialFieldId + 1,
        ThresholdMaterialFieldId = AdaptLuminanceMaterialFieldId + 1,
        ScaleMaterialFieldId = ThresholdMaterialFieldId + 1,
        BlurHorizMaterialFieldId = ScaleMaterialFieldId + 1,
        BlurVertMaterialFieldId = BlurHorizMaterialFieldId + 1,
        CompositeMaterialFieldId = BlurVertMaterialFieldId + 1,
        FinalScreenMaterialFieldId = CompositeMaterialFieldId + 1,
        CurrentAdaptLuminanceIdxFieldId = FinalScreenMaterialFieldId + 1,
        WidthFieldId = CurrentAdaptLuminanceIdxFieldId + 1,
        HeightFieldId = WidthFieldId + 1,
        SceneRenderTargetFieldId = HeightFieldId + 1,
        LuminanceRenderTargetFieldId = SceneRenderTargetFieldId + 1,
        AdaptLuminanceRenderTargetFieldId = LuminanceRenderTargetFieldId + 1,
        ThresholdRenderTargetFieldId = AdaptLuminanceRenderTargetFieldId + 1,
        BlurHorizRenderTargetFieldId = ThresholdRenderTargetFieldId + 1,
        BlurVertRenderTargetFieldId = BlurHorizRenderTargetFieldId + 1,
        ScaleRenderTargetFieldId = BlurVertRenderTargetFieldId + 1,
        CompositeRenderTargetFieldId = ScaleRenderTargetFieldId + 1,
        HdrShaderDataFieldId = CompositeRenderTargetFieldId + 1,
        LastTimeFieldId = HdrShaderDataFieldId + 1,
        CurrentTimeFieldId = LastTimeFieldId + 1,
        ZNearFieldId = CurrentTimeFieldId + 1,
        ZFarFieldId = ZNearFieldId + 1,
        NextFieldId = ZFarFieldId + 1
    };

    static const OSG::BitVector LuminanceMapShaderFieldMask =
        (TypeTraits<BitVector>::One << LuminanceMapShaderFieldId);
    static const OSG::BitVector AdaptLuminanceShaderFieldMask =
        (TypeTraits<BitVector>::One << AdaptLuminanceShaderFieldId);
    static const OSG::BitVector ThresholdShaderFieldMask =
        (TypeTraits<BitVector>::One << ThresholdShaderFieldId);
    static const OSG::BitVector ScaleShaderFieldMask =
        (TypeTraits<BitVector>::One << ScaleShaderFieldId);
    static const OSG::BitVector BlurHorizShaderFieldMask =
        (TypeTraits<BitVector>::One << BlurHorizShaderFieldId);
    static const OSG::BitVector BlurVertShaderFieldMask =
        (TypeTraits<BitVector>::One << BlurVertShaderFieldId);
    static const OSG::BitVector CompositeShaderFieldMask =
        (TypeTraits<BitVector>::One << CompositeShaderFieldId);
    static const OSG::BitVector FinalScreenShaderFieldMask =
        (TypeTraits<BitVector>::One << FinalScreenShaderFieldId);
    static const OSG::BitVector SharedTextureEnvChunkFieldMask =
        (TypeTraits<BitVector>::One << SharedTextureEnvChunkFieldId);
    static const OSG::BitVector SharedMaterialChunkFieldMask =
        (TypeTraits<BitVector>::One << SharedMaterialChunkFieldId);
    static const OSG::BitVector SceneMaterialFieldMask =
        (TypeTraits<BitVector>::One << SceneMaterialFieldId);
    static const OSG::BitVector LuminanceMapMaterialFieldMask =
        (TypeTraits<BitVector>::One << LuminanceMapMaterialFieldId);
    static const OSG::BitVector AdaptLuminanceMaterialFieldMask =
        (TypeTraits<BitVector>::One << AdaptLuminanceMaterialFieldId);
    static const OSG::BitVector ThresholdMaterialFieldMask =
        (TypeTraits<BitVector>::One << ThresholdMaterialFieldId);
    static const OSG::BitVector ScaleMaterialFieldMask =
        (TypeTraits<BitVector>::One << ScaleMaterialFieldId);
    static const OSG::BitVector BlurHorizMaterialFieldMask =
        (TypeTraits<BitVector>::One << BlurHorizMaterialFieldId);
    static const OSG::BitVector BlurVertMaterialFieldMask =
        (TypeTraits<BitVector>::One << BlurVertMaterialFieldId);
    static const OSG::BitVector CompositeMaterialFieldMask =
        (TypeTraits<BitVector>::One << CompositeMaterialFieldId);
    static const OSG::BitVector FinalScreenMaterialFieldMask =
        (TypeTraits<BitVector>::One << FinalScreenMaterialFieldId);
    static const OSG::BitVector CurrentAdaptLuminanceIdxFieldMask =
        (TypeTraits<BitVector>::One << CurrentAdaptLuminanceIdxFieldId);
    static const OSG::BitVector WidthFieldMask =
        (TypeTraits<BitVector>::One << WidthFieldId);
    static const OSG::BitVector HeightFieldMask =
        (TypeTraits<BitVector>::One << HeightFieldId);
    static const OSG::BitVector SceneRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << SceneRenderTargetFieldId);
    static const OSG::BitVector LuminanceRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << LuminanceRenderTargetFieldId);
    static const OSG::BitVector AdaptLuminanceRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << AdaptLuminanceRenderTargetFieldId);
    static const OSG::BitVector ThresholdRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << ThresholdRenderTargetFieldId);
    static const OSG::BitVector BlurHorizRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << BlurHorizRenderTargetFieldId);
    static const OSG::BitVector BlurVertRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << BlurVertRenderTargetFieldId);
    static const OSG::BitVector ScaleRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << ScaleRenderTargetFieldId);
    static const OSG::BitVector CompositeRenderTargetFieldMask =
        (TypeTraits<BitVector>::One << CompositeRenderTargetFieldId);
    static const OSG::BitVector HdrShaderDataFieldMask =
        (TypeTraits<BitVector>::One << HdrShaderDataFieldId);
    static const OSG::BitVector LastTimeFieldMask =
        (TypeTraits<BitVector>::One << LastTimeFieldId);
    static const OSG::BitVector CurrentTimeFieldMask =
        (TypeTraits<BitVector>::One << CurrentTimeFieldId);
    static const OSG::BitVector ZNearFieldMask =
        (TypeTraits<BitVector>::One << ZNearFieldId);
    static const OSG::BitVector ZFarFieldMask =
        (TypeTraits<BitVector>::One << ZFarFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecSimpleSHLChunkPtr SFLuminanceMapShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFAdaptLuminanceShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFThresholdShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFScaleShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFBlurHorizShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFBlurVertShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFCompositeShaderType;
    typedef SFUnrecSimpleSHLChunkPtr SFFinalScreenShaderType;
    typedef SFUnrecTextureEnvChunkPtr SFSharedTextureEnvChunkType;
    typedef SFUnrecMaterialChunkPtr SFSharedMaterialChunkType;
    typedef SFUnrecChunkMaterialPtr SFSceneMaterialType;
    typedef SFUnrecChunkMaterialPtr SFLuminanceMapMaterialType;
    typedef SFUnrecChunkMaterialPtr SFAdaptLuminanceMaterialType;
    typedef SFUnrecChunkMaterialPtr SFThresholdMaterialType;
    typedef MFUnrecChunkMaterialPtr MFScaleMaterialType;
    typedef SFUnrecChunkMaterialPtr SFBlurHorizMaterialType;
    typedef SFUnrecChunkMaterialPtr SFBlurVertMaterialType;
    typedef SFUnrecChunkMaterialPtr SFCompositeMaterialType;
    typedef SFUnrecChunkMaterialPtr SFFinalScreenMaterialType;
    typedef SFUInt32          SFCurrentAdaptLuminanceIdxType;
    typedef SFInt32           SFWidthType;
    typedef SFInt32           SFHeightType;
    typedef SFUnrecFrameBufferObjectPtr SFSceneRenderTargetType;
    typedef SFUnrecFrameBufferObjectPtr SFLuminanceRenderTargetType;
    typedef MFUnrecFrameBufferObjectPtr MFAdaptLuminanceRenderTargetType;
    typedef SFUnrecFrameBufferObjectPtr SFThresholdRenderTargetType;
    typedef SFUnrecFrameBufferObjectPtr SFBlurHorizRenderTargetType;
    typedef SFUnrecFrameBufferObjectPtr SFBlurVertRenderTargetType;
    typedef MFUnrecFrameBufferObjectPtr MFScaleRenderTargetType;
    typedef SFUnrecFrameBufferObjectPtr SFCompositeRenderTargetType;
    typedef SFUnrecUniformBufferObjStd140ChunkPtr SFHdrShaderDataType;
    typedef SFReal64          SFLastTimeType;
    typedef SFReal64          SFCurrentTimeType;
    typedef SFReal32          SFZNearType;
    typedef SFReal32          SFZFarType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecSimpleSHLChunkPtr *getSFLuminanceMapShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFLuminanceMapShader(void);
            const SFUnrecSimpleSHLChunkPtr *getSFAdaptLuminanceShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFAdaptLuminanceShader(void);
            const SFUnrecSimpleSHLChunkPtr *getSFThresholdShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFThresholdShader(void);
            const SFUnrecSimpleSHLChunkPtr *getSFScaleShader    (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFScaleShader    (void);
            const SFUnrecSimpleSHLChunkPtr *getSFBlurHorizShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFBlurHorizShader(void);
            const SFUnrecSimpleSHLChunkPtr *getSFBlurVertShader (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFBlurVertShader (void);
            const SFUnrecSimpleSHLChunkPtr *getSFCompositeShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFCompositeShader(void);
            const SFUnrecSimpleSHLChunkPtr *getSFFinalScreenShader(void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFFinalScreenShader(void);
            const SFUnrecTextureEnvChunkPtr *getSFSharedTextureEnvChunk(void) const;
                  SFUnrecTextureEnvChunkPtr *editSFSharedTextureEnvChunk(void);
            const SFUnrecMaterialChunkPtr *getSFSharedMaterialChunk(void) const;
                  SFUnrecMaterialChunkPtr *editSFSharedMaterialChunk(void);
            const SFUnrecChunkMaterialPtr *getSFSceneMaterial  (void) const;
                  SFUnrecChunkMaterialPtr *editSFSceneMaterial  (void);
            const SFUnrecChunkMaterialPtr *getSFLuminanceMapMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFLuminanceMapMaterial(void);
            const SFUnrecChunkMaterialPtr *getSFAdaptLuminanceMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFAdaptLuminanceMaterial(void);
            const SFUnrecChunkMaterialPtr *getSFThresholdMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFThresholdMaterial(void);
            const MFUnrecChunkMaterialPtr *getMFScaleMaterial  (void) const;
                  MFUnrecChunkMaterialPtr *editMFScaleMaterial  (void);
            const SFUnrecChunkMaterialPtr *getSFBlurHorizMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFBlurHorizMaterial(void);
            const SFUnrecChunkMaterialPtr *getSFBlurVertMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFBlurVertMaterial(void);
            const SFUnrecChunkMaterialPtr *getSFCompositeMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFCompositeMaterial(void);
            const SFUnrecChunkMaterialPtr *getSFFinalScreenMaterial(void) const;
                  SFUnrecChunkMaterialPtr *editSFFinalScreenMaterial(void);

                  SFUInt32            *editSFCurrentAdaptLuminanceIdx(void);
            const SFUInt32            *getSFCurrentAdaptLuminanceIdx (void) const;

                  SFInt32             *editSFWidth          (void);
            const SFInt32             *getSFWidth           (void) const;

                  SFInt32             *editSFHeight         (void);
            const SFInt32             *getSFHeight          (void) const;
            const SFUnrecFrameBufferObjectPtr *getSFSceneRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFSceneRenderTarget(void);
            const SFUnrecFrameBufferObjectPtr *getSFLuminanceRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFLuminanceRenderTarget(void);
            const MFUnrecFrameBufferObjectPtr *getMFAdaptLuminanceRenderTarget(void) const;
                  MFUnrecFrameBufferObjectPtr *editMFAdaptLuminanceRenderTarget(void);
            const SFUnrecFrameBufferObjectPtr *getSFThresholdRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFThresholdRenderTarget(void);
            const SFUnrecFrameBufferObjectPtr *getSFBlurHorizRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFBlurHorizRenderTarget(void);
            const SFUnrecFrameBufferObjectPtr *getSFBlurVertRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFBlurVertRenderTarget(void);
            const MFUnrecFrameBufferObjectPtr *getMFScaleRenderTarget(void) const;
                  MFUnrecFrameBufferObjectPtr *editMFScaleRenderTarget(void);
            const SFUnrecFrameBufferObjectPtr *getSFCompositeRenderTarget(void) const;
                  SFUnrecFrameBufferObjectPtr *editSFCompositeRenderTarget(void);
            const SFUnrecUniformBufferObjStd140ChunkPtr *getSFHdrShaderData  (void) const;
                  SFUnrecUniformBufferObjStd140ChunkPtr *editSFHdrShaderData  (void);

                  SFReal64            *editSFLastTime       (void);
            const SFReal64            *getSFLastTime        (void) const;

                  SFReal64            *editSFCurrentTime    (void);
            const SFReal64            *getSFCurrentTime     (void) const;

                  SFReal32            *editSFZNear          (void);
            const SFReal32            *getSFZNear           (void) const;

                  SFReal32            *editSFZFar           (void);
            const SFReal32            *getSFZFar            (void) const;


                  SimpleSHLChunk * getLuminanceMapShader(void) const;

                  SimpleSHLChunk * getAdaptLuminanceShader(void) const;

                  SimpleSHLChunk * getThresholdShader(void) const;

                  SimpleSHLChunk * getScaleShader    (void) const;

                  SimpleSHLChunk * getBlurHorizShader(void) const;

                  SimpleSHLChunk * getBlurVertShader (void) const;

                  SimpleSHLChunk * getCompositeShader(void) const;

                  SimpleSHLChunk * getFinalScreenShader(void) const;

                  TextureEnvChunk * getSharedTextureEnvChunk(void) const;

                  MaterialChunk * getSharedMaterialChunk(void) const;

                  ChunkMaterial * getSceneMaterial  (void) const;

                  ChunkMaterial * getLuminanceMapMaterial(void) const;

                  ChunkMaterial * getAdaptLuminanceMaterial(void) const;

                  ChunkMaterial * getThresholdMaterial(void) const;

                  ChunkMaterial * getScaleMaterial  (const UInt32 index) const;

                  ChunkMaterial * getBlurHorizMaterial(void) const;

                  ChunkMaterial * getBlurVertMaterial(void) const;

                  ChunkMaterial * getCompositeMaterial(void) const;

                  ChunkMaterial * getFinalScreenMaterial(void) const;

                  UInt32              &editCurrentAdaptLuminanceIdx(void);
                  UInt32               getCurrentAdaptLuminanceIdx (void) const;

                  Int32               &editWidth          (void);
                  Int32                getWidth           (void) const;

                  Int32               &editHeight         (void);
                  Int32                getHeight          (void) const;

                  FrameBufferObject * getSceneRenderTarget(void) const;

                  FrameBufferObject * getLuminanceRenderTarget(void) const;

                  FrameBufferObject * getAdaptLuminanceRenderTarget(const UInt32 index) const;

                  FrameBufferObject * getThresholdRenderTarget(void) const;

                  FrameBufferObject * getBlurHorizRenderTarget(void) const;

                  FrameBufferObject * getBlurVertRenderTarget(void) const;

                  FrameBufferObject * getScaleRenderTarget(const UInt32 index) const;

                  FrameBufferObject * getCompositeRenderTarget(void) const;

                  UniformBufferObjStd140Chunk * getHdrShaderData  (void) const;

                  Real64              &editLastTime       (void);
                  Real64               getLastTime        (void) const;

                  Real64              &editCurrentTime    (void);
                  Real64               getCurrentTime     (void) const;

                  Real32              &editZNear          (void);
                  Real32               getZNear           (void) const;

                  Real32              &editZFar           (void);
                  Real32               getZFar            (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setLuminanceMapShader(SimpleSHLChunk * const value);
            void setAdaptLuminanceShader(SimpleSHLChunk * const value);
            void setThresholdShader(SimpleSHLChunk * const value);
            void setScaleShader    (SimpleSHLChunk * const value);
            void setBlurHorizShader(SimpleSHLChunk * const value);
            void setBlurVertShader (SimpleSHLChunk * const value);
            void setCompositeShader(SimpleSHLChunk * const value);
            void setFinalScreenShader(SimpleSHLChunk * const value);
            void setSharedTextureEnvChunk(TextureEnvChunk * const value);
            void setSharedMaterialChunk(MaterialChunk * const value);
            void setSceneMaterial  (ChunkMaterial * const value);
            void setLuminanceMapMaterial(ChunkMaterial * const value);
            void setAdaptLuminanceMaterial(ChunkMaterial * const value);
            void setThresholdMaterial(ChunkMaterial * const value);
            void setBlurHorizMaterial(ChunkMaterial * const value);
            void setBlurVertMaterial(ChunkMaterial * const value);
            void setCompositeMaterial(ChunkMaterial * const value);
            void setFinalScreenMaterial(ChunkMaterial * const value);
            void setCurrentAdaptLuminanceIdx(const UInt32 value);
            void setWidth          (const Int32 value);
            void setHeight         (const Int32 value);
            void setSceneRenderTarget(FrameBufferObject * const value);
            void setLuminanceRenderTarget(FrameBufferObject * const value);
            void setThresholdRenderTarget(FrameBufferObject * const value);
            void setBlurHorizRenderTarget(FrameBufferObject * const value);
            void setBlurVertRenderTarget(FrameBufferObject * const value);
            void setCompositeRenderTarget(FrameBufferObject * const value);
            void setHdrShaderData  (UniformBufferObjStd140Chunk * const value);
            void setLastTime       (const Real64 value);
            void setCurrentTime    (const Real64 value);
            void setZNear          (const Real32 value);
            void setZFar           (const Real32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToScaleMaterial           (ChunkMaterial * const value   );
    void assignScaleMaterial          (const MFUnrecChunkMaterialPtr &value);
    void removeFromScaleMaterial (UInt32               uiIndex );
    void removeObjFromScaleMaterial(ChunkMaterial * const value   );
    void clearScaleMaterial            (void                         );

    void pushToAdaptLuminanceRenderTarget           (FrameBufferObject * const value   );
    void assignAdaptLuminanceRenderTarget          (const MFUnrecFrameBufferObjectPtr &value);
    void removeFromAdaptLuminanceRenderTarget (UInt32               uiIndex );
    void removeObjFromAdaptLuminanceRenderTarget(FrameBufferObject * const value   );
    void clearAdaptLuminanceRenderTarget            (void                         );

    void pushToScaleRenderTarget           (FrameBufferObject * const value   );
    void assignScaleRenderTarget          (const MFUnrecFrameBufferObjectPtr &value);
    void removeFromScaleRenderTarget (UInt32               uiIndex );
    void removeObjFromScaleRenderTarget(FrameBufferObject * const value   );
    void clearScaleRenderTarget            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  HDR2StageDataTransitPtr  create          (void);
    static  HDR2StageData           *createEmpty     (void);

    static  HDR2StageDataTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  HDR2StageData            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  HDR2StageDataTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecSimpleSHLChunkPtr _sfLuminanceMapShader;
    SFUnrecSimpleSHLChunkPtr _sfAdaptLuminanceShader;
    SFUnrecSimpleSHLChunkPtr _sfThresholdShader;
    SFUnrecSimpleSHLChunkPtr _sfScaleShader;
    SFUnrecSimpleSHLChunkPtr _sfBlurHorizShader;
    SFUnrecSimpleSHLChunkPtr _sfBlurVertShader;
    SFUnrecSimpleSHLChunkPtr _sfCompositeShader;
    SFUnrecSimpleSHLChunkPtr _sfFinalScreenShader;
    SFUnrecTextureEnvChunkPtr _sfSharedTextureEnvChunk;
    SFUnrecMaterialChunkPtr _sfSharedMaterialChunk;
    SFUnrecChunkMaterialPtr _sfSceneMaterial;
    SFUnrecChunkMaterialPtr _sfLuminanceMapMaterial;
    SFUnrecChunkMaterialPtr _sfAdaptLuminanceMaterial;
    SFUnrecChunkMaterialPtr _sfThresholdMaterial;
    MFUnrecChunkMaterialPtr _mfScaleMaterial;
    SFUnrecChunkMaterialPtr _sfBlurHorizMaterial;
    SFUnrecChunkMaterialPtr _sfBlurVertMaterial;
    SFUnrecChunkMaterialPtr _sfCompositeMaterial;
    SFUnrecChunkMaterialPtr _sfFinalScreenMaterial;
    SFUInt32          _sfCurrentAdaptLuminanceIdx;
    SFInt32           _sfWidth;
    SFInt32           _sfHeight;
    SFUnrecFrameBufferObjectPtr _sfSceneRenderTarget;
    SFUnrecFrameBufferObjectPtr _sfLuminanceRenderTarget;
    MFUnrecFrameBufferObjectPtr _mfAdaptLuminanceRenderTarget;
    SFUnrecFrameBufferObjectPtr _sfThresholdRenderTarget;
    SFUnrecFrameBufferObjectPtr _sfBlurHorizRenderTarget;
    SFUnrecFrameBufferObjectPtr _sfBlurVertRenderTarget;
    MFUnrecFrameBufferObjectPtr _mfScaleRenderTarget;
    SFUnrecFrameBufferObjectPtr _sfCompositeRenderTarget;
    SFUnrecUniformBufferObjStd140ChunkPtr _sfHdrShaderData;
    SFReal64          _sfLastTime;
    SFReal64          _sfCurrentTime;
    SFReal32          _sfZNear;
    SFReal32          _sfZFar;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    HDR2StageDataBase(void);
    HDR2StageDataBase(const HDR2StageDataBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~HDR2StageDataBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const HDR2StageData *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleLuminanceMapShader (void) const;
     EditFieldHandlePtr editHandleLuminanceMapShader(void);
     GetFieldHandlePtr  getHandleAdaptLuminanceShader (void) const;
     EditFieldHandlePtr editHandleAdaptLuminanceShader(void);
     GetFieldHandlePtr  getHandleThresholdShader (void) const;
     EditFieldHandlePtr editHandleThresholdShader(void);
     GetFieldHandlePtr  getHandleScaleShader     (void) const;
     EditFieldHandlePtr editHandleScaleShader    (void);
     GetFieldHandlePtr  getHandleBlurHorizShader (void) const;
     EditFieldHandlePtr editHandleBlurHorizShader(void);
     GetFieldHandlePtr  getHandleBlurVertShader  (void) const;
     EditFieldHandlePtr editHandleBlurVertShader (void);
     GetFieldHandlePtr  getHandleCompositeShader (void) const;
     EditFieldHandlePtr editHandleCompositeShader(void);
     GetFieldHandlePtr  getHandleFinalScreenShader (void) const;
     EditFieldHandlePtr editHandleFinalScreenShader(void);
     GetFieldHandlePtr  getHandleSharedTextureEnvChunk (void) const;
     EditFieldHandlePtr editHandleSharedTextureEnvChunk(void);
     GetFieldHandlePtr  getHandleSharedMaterialChunk (void) const;
     EditFieldHandlePtr editHandleSharedMaterialChunk(void);
     GetFieldHandlePtr  getHandleSceneMaterial   (void) const;
     EditFieldHandlePtr editHandleSceneMaterial  (void);
     GetFieldHandlePtr  getHandleLuminanceMapMaterial (void) const;
     EditFieldHandlePtr editHandleLuminanceMapMaterial(void);
     GetFieldHandlePtr  getHandleAdaptLuminanceMaterial (void) const;
     EditFieldHandlePtr editHandleAdaptLuminanceMaterial(void);
     GetFieldHandlePtr  getHandleThresholdMaterial (void) const;
     EditFieldHandlePtr editHandleThresholdMaterial(void);
     GetFieldHandlePtr  getHandleScaleMaterial   (void) const;
     EditFieldHandlePtr editHandleScaleMaterial  (void);
     GetFieldHandlePtr  getHandleBlurHorizMaterial (void) const;
     EditFieldHandlePtr editHandleBlurHorizMaterial(void);
     GetFieldHandlePtr  getHandleBlurVertMaterial (void) const;
     EditFieldHandlePtr editHandleBlurVertMaterial(void);
     GetFieldHandlePtr  getHandleCompositeMaterial (void) const;
     EditFieldHandlePtr editHandleCompositeMaterial(void);
     GetFieldHandlePtr  getHandleFinalScreenMaterial (void) const;
     EditFieldHandlePtr editHandleFinalScreenMaterial(void);
     GetFieldHandlePtr  getHandleCurrentAdaptLuminanceIdx (void) const;
     EditFieldHandlePtr editHandleCurrentAdaptLuminanceIdx(void);
     GetFieldHandlePtr  getHandleWidth           (void) const;
     EditFieldHandlePtr editHandleWidth          (void);
     GetFieldHandlePtr  getHandleHeight          (void) const;
     EditFieldHandlePtr editHandleHeight         (void);
     GetFieldHandlePtr  getHandleSceneRenderTarget (void) const;
     EditFieldHandlePtr editHandleSceneRenderTarget(void);
     GetFieldHandlePtr  getHandleLuminanceRenderTarget (void) const;
     EditFieldHandlePtr editHandleLuminanceRenderTarget(void);
     GetFieldHandlePtr  getHandleAdaptLuminanceRenderTarget (void) const;
     EditFieldHandlePtr editHandleAdaptLuminanceRenderTarget(void);
     GetFieldHandlePtr  getHandleThresholdRenderTarget (void) const;
     EditFieldHandlePtr editHandleThresholdRenderTarget(void);
     GetFieldHandlePtr  getHandleBlurHorizRenderTarget (void) const;
     EditFieldHandlePtr editHandleBlurHorizRenderTarget(void);
     GetFieldHandlePtr  getHandleBlurVertRenderTarget (void) const;
     EditFieldHandlePtr editHandleBlurVertRenderTarget(void);
     GetFieldHandlePtr  getHandleScaleRenderTarget (void) const;
     EditFieldHandlePtr editHandleScaleRenderTarget(void);
     GetFieldHandlePtr  getHandleCompositeRenderTarget (void) const;
     EditFieldHandlePtr editHandleCompositeRenderTarget(void);
     GetFieldHandlePtr  getHandleHdrShaderData   (void) const;
     EditFieldHandlePtr editHandleHdrShaderData  (void);
     GetFieldHandlePtr  getHandleLastTime        (void) const;
     EditFieldHandlePtr editHandleLastTime       (void);
     GetFieldHandlePtr  getHandleCurrentTime     (void) const;
     EditFieldHandlePtr editHandleCurrentTime    (void);
     GetFieldHandlePtr  getHandleZNear           (void) const;
     EditFieldHandlePtr editHandleZNear          (void);
     GetFieldHandlePtr  getHandleZFar            (void) const;
     EditFieldHandlePtr editHandleZFar           (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      HDR2StageDataBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const HDR2StageDataBase &source);
};

typedef HDR2StageDataBase *HDR2StageDataBaseP;

OSG_END_NAMESPACE

#endif /* _OSGHDR2STAGEDATABASE_H_ */
